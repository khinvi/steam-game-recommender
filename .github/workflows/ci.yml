name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Linting and Code Quality
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy pytest pytest-asyncio
    
    - name: Run Black (code formatting)
      run: black --check --diff src/ tests/
    
    - name: Run isort (import sorting)
      run: isort --check-only --diff src/ tests/
    
    - name: Run Flake8 (linting)
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy (type checking)
      run: mypy src/ --ignore-missing-imports

  # Testing
  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run Safety (dependency vulnerability scan)
      run: safety check
    
    - name: Run Bandit (security linting)
      run: bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results
        path: bandit-report.json

  # Build and Test Docker Image
  docker:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -f deployment/docker/Dockerfile -t steam-recommender:test .
    
    - name: Test Docker image
      run: |
        docker run --rm steam-recommender:test python -c "import src; print('Import successful')"

  # Deploy to Staging (on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [lint, test, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        # Example: kubectl apply, docker push, etc.

  # Deploy to Production (on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint, test, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
        # Example: kubectl apply, docker push, etc.

  # Model Training (scheduled)
  train-models:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Train ML models
      run: |
        python -m src.scripts.train_models
      env:
        STEAM_API_KEY: ${{ secrets.STEAM_API_KEY }}
    
    - name: Upload trained models
      uses: actions/upload-artifact@v3
      with:
        name: trained-models
        path: data/models/

# Cache dependencies for faster builds
cache:
  paths:
    - ~/.cache/pip
    - ~/.cache/pytest 